"""autogenerated by genpy from fhwa2_MOOS_to_ROS/G35CAN.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fhwa2_MOOS_to_ROS.msg
import genpy
import std_msgs.msg

class G35CAN(genpy.Message):
  _md5sum = "442b8a5a6a45df428ff598e19a9fe3db"
  _type = "fhwa2_MOOS_to_ROS/G35CAN"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
# Assume that all CAN messages will come from MOOS with the same time step
time MOOSstamp
# Steering information is in radians
fhwa2_MOOS_to_ROS/FourWheels WheelSpeed
    float32 FrontLeft
    float32 FrontRight
    float32 RearLeft
    float32 RearRight
float32 SteerAngle
# speed displayed to the driver in m/s (delivered from MOOS in km/hr)
float32 VehicleSpeed
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: fhwa2_MOOS_to_ROS/FourWheels
# intented as a helper message
float32 FrontLeft
float32 FrontRight
float32 RearLeft
float32 RearRight
"""
  __slots__ = ['header','MOOSstamp','WheelSpeed','FrontLeft','FrontRight','RearLeft','RearRight','SteerAngle','VehicleSpeed']
  _slot_types = ['std_msgs/Header','time','fhwa2_MOOS_to_ROS/FourWheels','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,MOOSstamp,WheelSpeed,FrontLeft,FrontRight,RearLeft,RearRight,SteerAngle,VehicleSpeed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(G35CAN, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.MOOSstamp is None:
        self.MOOSstamp = genpy.Time()
      if self.WheelSpeed is None:
        self.WheelSpeed = fhwa2_MOOS_to_ROS.msg.FourWheels()
      if self.FrontLeft is None:
        self.FrontLeft = 0.
      if self.FrontRight is None:
        self.FrontRight = 0.
      if self.RearLeft is None:
        self.RearLeft = 0.
      if self.RearRight is None:
        self.RearRight = 0.
      if self.SteerAngle is None:
        self.SteerAngle = 0.
      if self.VehicleSpeed is None:
        self.VehicleSpeed = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.MOOSstamp = genpy.Time()
      self.WheelSpeed = fhwa2_MOOS_to_ROS.msg.FourWheels()
      self.FrontLeft = 0.
      self.FrontRight = 0.
      self.RearLeft = 0.
      self.RearRight = 0.
      self.SteerAngle = 0.
      self.VehicleSpeed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I10f.pack(_x.MOOSstamp.secs, _x.MOOSstamp.nsecs, _x.WheelSpeed.FrontLeft, _x.WheelSpeed.FrontRight, _x.WheelSpeed.RearLeft, _x.WheelSpeed.RearRight, _x.FrontLeft, _x.FrontRight, _x.RearLeft, _x.RearRight, _x.SteerAngle, _x.VehicleSpeed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.MOOSstamp is None:
        self.MOOSstamp = genpy.Time()
      if self.WheelSpeed is None:
        self.WheelSpeed = fhwa2_MOOS_to_ROS.msg.FourWheels()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.MOOSstamp.secs, _x.MOOSstamp.nsecs, _x.WheelSpeed.FrontLeft, _x.WheelSpeed.FrontRight, _x.WheelSpeed.RearLeft, _x.WheelSpeed.RearRight, _x.FrontLeft, _x.FrontRight, _x.RearLeft, _x.RearRight, _x.SteerAngle, _x.VehicleSpeed,) = _struct_2I10f.unpack(str[start:end])
      self.MOOSstamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I10f.pack(_x.MOOSstamp.secs, _x.MOOSstamp.nsecs, _x.WheelSpeed.FrontLeft, _x.WheelSpeed.FrontRight, _x.WheelSpeed.RearLeft, _x.WheelSpeed.RearRight, _x.FrontLeft, _x.FrontRight, _x.RearLeft, _x.RearRight, _x.SteerAngle, _x.VehicleSpeed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.MOOSstamp is None:
        self.MOOSstamp = genpy.Time()
      if self.WheelSpeed is None:
        self.WheelSpeed = fhwa2_MOOS_to_ROS.msg.FourWheels()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.MOOSstamp.secs, _x.MOOSstamp.nsecs, _x.WheelSpeed.FrontLeft, _x.WheelSpeed.FrontRight, _x.WheelSpeed.RearLeft, _x.WheelSpeed.RearRight, _x.FrontLeft, _x.FrontRight, _x.RearLeft, _x.RearRight, _x.SteerAngle, _x.VehicleSpeed,) = _struct_2I10f.unpack(str[start:end])
      self.MOOSstamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2I10f = struct.Struct("<2I10f")
