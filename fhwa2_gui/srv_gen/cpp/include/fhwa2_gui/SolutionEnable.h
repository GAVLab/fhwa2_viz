/* Auto-generated by genmsg_cpp for file /home/rgcofield/devel/fhwa2_ws/fhwa2_viz/fhwa2_gui/srv/SolutionEnable.srv */
#ifndef FHWA2_GUI_SERVICE_SOLUTIONENABLE_H
#define FHWA2_GUI_SERVICE_SOLUTIONENABLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace fhwa2_gui
{
template <class ContainerAllocator>
struct SolutionEnableRequest_ {
  typedef SolutionEnableRequest_<ContainerAllocator> Type;

  SolutionEnableRequest_()
  : enable(false)
  {
  }

  SolutionEnableRequest_(const ContainerAllocator& _alloc)
  : enable(false)
  {
  }

  typedef uint8_t _enable_type;
  uint8_t enable;


  typedef boost::shared_ptr< ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SolutionEnableRequest
typedef  ::fhwa2_gui::SolutionEnableRequest_<std::allocator<void> > SolutionEnableRequest;

typedef boost::shared_ptr< ::fhwa2_gui::SolutionEnableRequest> SolutionEnableRequestPtr;
typedef boost::shared_ptr< ::fhwa2_gui::SolutionEnableRequest const> SolutionEnableRequestConstPtr;


template <class ContainerAllocator>
struct SolutionEnableResponse_ {
  typedef SolutionEnableResponse_<ContainerAllocator> Type;

  SolutionEnableResponse_()
  : state(false)
  {
  }

  SolutionEnableResponse_(const ContainerAllocator& _alloc)
  : state(false)
  {
  }

  typedef uint8_t _state_type;
  uint8_t state;


  typedef boost::shared_ptr< ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SolutionEnableResponse
typedef  ::fhwa2_gui::SolutionEnableResponse_<std::allocator<void> > SolutionEnableResponse;

typedef boost::shared_ptr< ::fhwa2_gui::SolutionEnableResponse> SolutionEnableResponsePtr;
typedef boost::shared_ptr< ::fhwa2_gui::SolutionEnableResponse const> SolutionEnableResponseConstPtr;

struct SolutionEnable
{

typedef SolutionEnableRequest Request;
typedef SolutionEnableResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SolutionEnable
} // namespace fhwa2_gui

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8c1211af706069c994c06e00eb59ac9e";
  }

  static const char* value(const  ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8c1211af706069c9ULL;
  static const uint64_t static_value2 = 0x94c06e00eb59ac9eULL;
};

template<class ContainerAllocator>
struct DataType< ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fhwa2_gui/SolutionEnableRequest";
  }

  static const char* value(const  ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool enable\n\
\n\
";
  }

  static const char* value(const  ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "001fde3cab9e313a150416ff09c08ee4";
  }

  static const char* value(const  ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x001fde3cab9e313aULL;
  static const uint64_t static_value2 = 0x150416ff09c08ee4ULL;
};

template<class ContainerAllocator>
struct DataType< ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fhwa2_gui/SolutionEnableResponse";
  }

  static const char* value(const  ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool state\n\
\n\
";
  }

  static const char* value(const  ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.enable);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SolutionEnableRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SolutionEnableResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<fhwa2_gui::SolutionEnable> {
  static const char* value() 
  {
    return "3ea372bdd9923da8a6c7ae2db934a6cb";
  }

  static const char* value(const fhwa2_gui::SolutionEnable&) { return value(); } 
};

template<>
struct DataType<fhwa2_gui::SolutionEnable> {
  static const char* value() 
  {
    return "fhwa2_gui/SolutionEnable";
  }

  static const char* value(const fhwa2_gui::SolutionEnable&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3ea372bdd9923da8a6c7ae2db934a6cb";
  }

  static const char* value(const fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fhwa2_gui/SolutionEnable";
  }

  static const char* value(const fhwa2_gui::SolutionEnableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3ea372bdd9923da8a6c7ae2db934a6cb";
  }

  static const char* value(const fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fhwa2_gui/SolutionEnable";
  }

  static const char* value(const fhwa2_gui::SolutionEnableResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FHWA2_GUI_SERVICE_SOLUTIONENABLE_H

